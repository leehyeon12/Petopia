<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xmlns:beans="http://www.springframework.org/schema/beans"
   xmlns:mvc="http://www.springframework.org/schema/mvc"
   xmlns:context="http://www.springframework.org/schema/context"
   xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

   <!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
   
   <!-- Enables the Spring MVC @Controller programming model -->
   <mvc:annotation-driven />

   <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
   <mvc:resources mapping="/resources/**" location="/resources/" />
   <!-- ==== #18. 이미지, 동영상, js, css 파일등이 위치하는 경로를 의미한다.
                            그 경로는 /webapp/resources 아래에 위치하거나
                            또는  /webapp/resources 아래에 폴더를 만들어서 저장시켜야 한다. ==== -->
	
	<!-- 인터셉터 -->
	<mvc:interceptors>
	    <mvc:interceptor> 
	        <mvc:mapping path="/**/unreadNotificationCount.pet"/>
	        <beans:bean class="com.final2.petopia.aop.LoginCheckInterceptor"/>
	    </mvc:interceptor>
	</mvc:interceptors>

   <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
   <!-- ===> 우선적으로 tiles 프레임워크를 사용할 것이지만, 팝업창 띄우기 또는 Ajax 통신시 tiles를 사용안하는 뷰단이 필요할 수 있기에
             Resolver의 사용우선순위를 InternalResourceViewResolver 을 2로 한다. 
             <beans:property name="order" value="2"/> 를 주면 된다. ===== -->
   <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
      <beans:property name="prefix" value="/WEB-INF/views/" />
      <beans:property name="suffix" value=".jsp" />
      <beans:property name="order" value="2"/>
   </beans:bean>
   <!-- ==== #18. Controller 에서 만들어진 데이터 정보를 view단 페이지인 jsp 페이지로 넘길시
                 view단 페이지의 지정은 return "view단페이지"; 와 같이 String 타입으로 넘겨주면
                 InternalResourceViewResolver 클래스의 객체가 이 문자열을 받아와서 prefix에 적어둔 경로를 view단페이지 앞에 붙이고,
                 view단페이지 뒤에는 .jsp 를 붙여서 view단 페이지로 설정해준다.
                          
            예> Controller 에서  return "member"; 로 하면
                  자동적으로 view단 페이지는   "/WEB-INF/views/member.jsp"; 가 되어진다.  
         
        == web.xml 에 생성되어진 DispatcherServlet 에게 뷰 정보를 전달하는 방법 == 
        Controller 단 에서 String 타입으로 뷰 이름을 주는 경우, 뷰 이름으로부터 실제로 사용할 뷰 객체를 매핑하여 결정(해결)해주는 뷰 리졸버가 필요하다.          
        InternalResourceViewResolver 는 Default(기본) 뷰 리졸버 로서 JSP를 뷰로 사용할 때 쓰인다.                 
   -->
   
   <!-- ==== #18. 컨트롤러(*.java)가 위치하는 패키지명 지정하기 ====  -->
   <!-- 
   <context:component-scan base-package="com.spring.board" /> 
   -->
   <context:component-scan base-package="com.final2.*" />
   <!-- 앞으로 생성할 모든 컨트롤러, 서비스단, Aspect 등  모든 클래스들(*.java)은
            항상 com.test.* 패키지 안에서 생성되어져야만 스프링컨테이너에 의해 스캔되어 자동적으로 bean 으로 등록되어진다.
        bean 으로 등록되어진 객체들만이 스프링컨테이너에 의해 의존객체주입(Dependency Injection)되는 등 
           스프링컨테이너가 자동으로 관리해주는 대상이 되어진다. 
           그러면 스프링컨테이너에 의해 자동으로 관리되어지도록 클래스를 bean 으로 등록시키고자 할때 사용되어지는 방법이 component-scan 을 사용하는 것이다.  
        component-scan 은 특정 클래스가 bean 으로 등록되어져 사용되도록 XML 파일에 일일이 bean등록을 하지 않더라도, 
        bean으로 등록되어 사용되어질 클래스는 패키지를 base-package 속에 만들고  클래스 명 위에 @Component 애노테이션만 써주기만 하면 
            해당 클래스는 자동으로 bean으로 등록되어 사용할 수 있게 되어진다. 
            그런데 @Controller , @Service , @Repository 애노테이션을 사용하는 클래스는
        @Controller , @Service , @Repository 애노테이션 속에 @Component 기능이 이미 포함되어져 있으므로
           굳이 @Component 를 또 다시 기술할 필요가 없다.
        @Controller , @Service , @Repository 기능이 없는 일반 클래스를 bean 으로 등록하여 사용하고자 할때  
            그 클래스는 패키지를 base-package 로 하고 클래스명 위에 @Component 애노테이션을 붙이기만 하면 된다.  
            
        bean 으로 등록되어진 클래스만이 스프링컨테이너가 자동적으로 관리를 해줄 수 있게 된다. --> 
   
   <!-- ==== #44. 양방향 암호화 알고리즘인 AES256 를 사용하여 복호화 하기위한 클래스(파라미터가 있는 생성자) 의존객체 bean 생성하기 ===== -->    
  <beans:bean id="aes" class="com.final2.petopia.common.AES256"> 
       <beans:constructor-arg> 
          <beans:value>qwer1234$abcd0070#ZA</beans:value>
       </beans:constructor-arg> 
    </beans:bean>
   

        
<!-- ===== #19. 일단 스프링에서 트랜잭션 처리를 하기 위해서는
            먼저 src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml 파일에
        Namespaces 에 aop를 체크를 하고,  
                아래와 같이 트랜잭션 처리를 위한 aop 포인트컷을 등록을 해야 한다. -->    
    <!--  
      - 아래의 <aop:aspectj-autoproxy />가 AOP 관련 어노테이션 동작이 가능하게 설정해줌.
    -->   
   <!--  AOP 관련 어노테이션 동작이 가능하게 설정 -->   
   <aop:aspectj-autoproxy /> <!-- 추가 -->        
    
   <aop:config proxy-target-class="true">
     <aop:pointcut id="controllerOperation" expression="execution(public * com.final2..*Controller.*(..))" />
    </aop:config>
    
    
    <!-- ======= #20. 실행시 모든 페이지에 기본틀이 되어지는 틀을 배치하기 위한 템플릿 프레임워크인 TilesViewResolver 를 사용하기 위해 빈으로 등록한다. ======= -->
   <beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
        <beans:property name="definitions">
            <beans:list>
                 <beans:value>/WEB-INF/tiles/tiles-layout.xml</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>
   
   <beans:bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
        <beans:property name="order" value="1"/>
    </beans:bean>   
   <!-- ===> Resolver의 사용우선순위를 TilesViewResolver 를 1로 한다. 
             <beans:property name="order" value="1"/> 을 주면 된다. -->
   
   
   <!-- ===== #137. 파일업로드 및 파일다운로드에 필요한 의존객체 설정하기 ===== -->
   <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
   <!-- 자바파일이 UTF-8로 저장된 경우 한글파일명이 깨지지 않게하기 위해 -->
        <beans:property name="defaultEncoding" value="utf-8" />
      <beans:property name="maxUploadSize" value="10485760" />
   </beans:bean> 
   <!-- 파일업로드에 필요한 jar 라이브러리를 추가하기 위해 pom.xml의 dependencies 태그내에 다음 태그를 추가한다.
      
      <dependency>
        <groupId>commons-fileupload</groupId> 
        <artifactId>commons-fileupload</artifactId>
        <version>1.3.3</version>
      </dependency>
      
      그런 다음, 파일처리를 해주는 Multipart 지원 기능을 스프링에서 사용하려면 
      먼저 MultipartResolver를 스프링 설정 파일에 등록해주어야 한다.
      스프링에서 기본으로 제공하는 MultipartResolver는 CommonsMultipartResolver이다. 
      CommonsMultipartResolver를 MultipartResolver로 사용하려면 
      다음과 같이 빈 이름으로 "multipartResolver"를 사용해서 등록해야 한다.
      왜냐하면 DispatcherServlet은 파일처리를 사용할 경우 이름(아이디)이 "multipartResolver"인 빈을 사용하도록 설정되어 있기 때문에 
      "multipartResolver" 가 아닌 다른 이름(아이디)으로 지정할경우 MultipartResolver로 사용되지 않는다.
    -->

</beans:beans>